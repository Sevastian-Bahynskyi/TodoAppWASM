using Application.LogicInterfaces;
using Domain.CustomExceptions;
using Domain.DTOs;
using Domain.Models;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers;


[ApiController]
[Route("todos")]
public class TodoController: ControllerBase
{
    private readonly ITodoLogic todoLogic;

    public TodoController(ITodoLogic todoLogic)
    {
        this.todoLogic = todoLogic;
    }

    [HttpPost]
    public async Task<ActionResult<Todo>> CreateAsync(TodoCreationDto dto)
    {
        try
        {
            Todo todo = await todoLogic.CreateAsync(dto);
            return Created($"/todos/{todo.Id}", todo);

        }
        catch (UserNotFoundException e)
        {
            Console.WriteLine(e);
            return StatusCode(503, e.Message);
        }
        catch (TodoAlreadyExistsException e)
        {
            Console.WriteLine(e);
            return StatusCode(504, e.Message);
        }
        catch (InvalidTodoTitleLengthException e)
        {
            Console.WriteLine(e);
            return StatusCode(505, e.Message);
        }
    }


    [HttpGet]
    public async Task<ActionResult<IEnumerable<Todo>>> GetAsync(
        [FromQuery] string? username, [FromQuery] int? userId
        , [FromQuery] bool? completedStatus, [FromQuery] string? titleContains)
    {
        try
        {
            SearchTodoParametersDto parametersDto = new(username, userId, completedStatus, titleContains);
            var todos = await todoLogic.GetAsync(parametersDto);
            return Ok(todos);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return StatusCode(500, e.Message);
        }
    }
    
    [HttpGet("{id:int}")]
    public async Task<ActionResult<Todo>> GetAsync([FromRoute] int id)
    {
        try
        {
            var todo = await todoLogic.GetByIdAsync(id);
            return Ok(todo);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return StatusCode(500, e.Message);
        }
    }


    [HttpPatch]
    public async Task<IActionResult> UpdateAsync([FromBody] TodoUpdateDto updateDto)
    {
        try
        {
            await todoLogic.UpdateAsync(updateDto);
            return Ok();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return StatusCode(500, e.Message);
        }
    }

    [HttpDelete("{id:int}")]
    public async Task<ActionResult> DeleteAsync([FromRoute] int id)
    {
        try
        {
            await todoLogic.DeleteAsync(id);
            return Ok();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return StatusCode(500, e.Message);
        }
    }
    
    // Todo, questions to ask
    // why parameters in json body, or queries that are being generated by controller doesn't match my naming case
}