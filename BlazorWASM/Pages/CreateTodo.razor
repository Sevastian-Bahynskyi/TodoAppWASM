@page "/CreateTodo"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@inject ITodoService todoService
@inject IUserService userService



<div class="card">
    @if (userList == null)
        {
            <label>Loading users...</label>
        }
        else if (!userList.Any())
        {
            <label>No users, you cannot create a Todo without assignee.</label>
        }
        else
        {
            <h3>Create todo</h3>
            <div class="form-group">
                <label>Title: </label>
                <input type="text" maxlength="40" @bind="title" @bind:event="oninput"/>
            </div>

            <div class="form-group">
                <label>Assignee: </label>
                <select @onclick="InitUserList" @bind="selectedUserId">
                    @if (userList is null)
                    {
                        <option>Loading...</option>
                    }
                    else
                    {
                        <option>Choose</option>
                    }
                    @if (userList is not null)
                    {
                        foreach (var user in userList)
                        {
                            <option value="@user.Id">@user.Username</option>
                        }
                    }
                </select>
            </div>

            @if (!string.IsNullOrEmpty(response))
            {
                <label style="color: @color">@response</label>
            }


            <div class="button-row">
                <button class="actionbtn" @onclick="CreateAsync">Create todo</button>
            </div>
        }
</div>

@code {
    private string title = "";
    private string response = "";
    private string color = "";

    private int selectedUserId;
    private IEnumerable<User>? userList;

    protected override async Task OnInitializedAsync()
    {
        await InitUserList();
    }

    private async Task InitUserList()
    {
        userList = await userService.GetAllAsync(new SearchUserParametersDto(null));
    }

    private async Task CreateAsync()
    {
        color = "";
        response = "";
        try
        {
            await todoService.CreateAsync(new TodoCreationDto(selectedUserId, title));
            color = "green";
            response = $"{userList!.FirstOrDefault(u => u.Id == selectedUserId)!.Username} has a new task: {title}";
            title = "";
            selectedUserId = 0;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            response = e.Message;
            color = "red";
        }
    }
}