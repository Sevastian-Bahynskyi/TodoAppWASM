@page "/ViewTodos"
@using HttpClients.ClientInterfaces
@using Domain.Models;
@using Domain.DTOs
@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor
@using Radzen
@using UIComponents
@inject NavigationManager navManager
@inject ITodoService todoService
@inject IUserService userService
@inject ContextMenuService ContextMenuService


<RadzenContextMenu/>
@if (todoList == null)
{
    <label>Loading...</label>
}
else
{
    <div class="filters-container">
        <img class="funnel" src="@(doShowFilters? "icons/funnel.png": "icons/clear_funnel.png")" @onclick="() => doShowFilters = !doShowFilters" alt="@(doShowFilters? "Filter" : "Not filter")"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Assignee username:</label>
                <select @bind="selectedUserIdFilter">
                    @if (userList == null)
                    {
                        <option>Loading...</option>
                    }
                    else
                    {
                        <option value="null">All</option>
                        foreach (var user in userList)
                        {
                            <option value="@user.Id">@user.Username</option>
                        }
                    }
                </select>
            </div>
            <div class="filter">
                <label>Show TODOs:</label>
                <select @bind="completedFilter">
                    <option value="all">All</option>
                    <option value="true">Only completed</option>
                    <option value="false">Needs to be completed</option>
                </select>
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter"/>
            </div>
            <button class="actionbtn text-nowrap" @onclick="ApplyFilters">Apply filters</button>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(msg))
    {
        <label style="color: red;">@msg</label>
    }
    
        
    <div class="container-fluid row p-0 no-gutters d-flex">
        <div class="todos col-sm">
            <h3 class="col-title">Tasks TODO</h3>
            @foreach (var todo in todoList.Where(t => !t.IsCompleted))
            {
                <div class="todo-card" @oncontextmenu="@(args => ShowContextMenuWithItems(todo, args))" @oncontextmenu:preventDefault="true">
                    <label style="color: dodgerblue; font-size: 1.1rem">@todo.Title</label>
                    <label style="text-align: end">Assignee: @todo.Owner.Username</label>
                </div>
            }
        </div>
        
        <div class="vr vr-blurry p-0 d-flex flex-column justify-content-between"></div>
        <div class="todos col-sm">
             
            <h3 class="col-title">Completed tasks</h3>
            @foreach (var todo in todoList.Where(t => t.IsCompleted))
            {
                <div class="todo-card" @oncontextmenu="@(args => ShowContextMenuWithItems(todo, args))" @oncontextmenu:preventDefault="true">
                    <label style="color: dodgerblue; font-size: 1.1rem">@todo.Title</label>
                    <label style="text-align: end">Assignee: @todo.Owner.Username</label>
                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<Todo>? todoList;
    private IEnumerable<User>? userList;
    private bool doShowFilters = false;
    private bool showModal = false;

    private string msg = "";
    
    private string? selectedUserIdFilter;
    private string? titleContainsFilter;
    private string? completedFilter = "all";

    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            todoList = await todoService.GetAsync(new SearchTodoParametersDto());
            userList = await userService.GetAllAsync(new SearchUserParametersDto(null));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    void ShowContextMenuWithItems(Todo todo, MouseEventArgs args)
    {
        ContextMenuService.Open(args, ds =>
            @<RadzenMenu Click="args => OnMenuItemClick(todo, args)">
                <RadzenMenuItem Text="Edit" Value=1></RadzenMenuItem>
                <RadzenMenuItem Text="Delete" Value=2></RadzenMenuItem>
                @if (!todo.IsCompleted)
                {
                    <RadzenMenuItem Text="Complete" Value=3></RadzenMenuItem>
                }
            </RadzenMenu>
            );
    }
    
    async void OnMenuItemClick(Todo todo, MenuItemEventArgs args)
    {
        switch (args.Value)
        {
            case 1:
                navManager.NavigateTo($"/EditTodo/{todo.Id}");
                break;
            case 2:
                await DeleteAsync(todo.Id);
                StateHasChanged();
                ContextMenuService.Close();
                break;
            case 3:
                await CompleteTodo(todo, !todo.IsCompleted);
                StateHasChanged();
                ContextMenuService.Close();
                break;
        }
    }

    private async Task DeleteAsync(int id)
    {
        try
        {
            await todoService.DeleteAsync(id);
            var tempList = todoList!.ToList();
            tempList.RemoveAll(t => t.Id == id);
            todoList = tempList.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task ApplyFilters()
    {
        bool? completedStatus = completedFilter == "all" ? null : bool.Parse(completedFilter!);
        int? userIdFilter = int.TryParse(selectedUserIdFilter, out _)? int.Parse(selectedUserIdFilter!) : null;

        todoList = await todoService.GetAsync(new SearchTodoParametersDto(
            null, userIdFilter, completedStatus, titleContainsFilter));
    }
    
    private async Task CompleteTodo(Todo todo, bool status)
    {
        TodoUpdateDto updateDto = new TodoUpdateDto(todo.Id)
        {
            IsCompleted = status
        };

        try
        {
            await todoService.UpdateAsync(updateDto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        todoList = await todoService.GetAsync(new SearchTodoParametersDto());
    }
}